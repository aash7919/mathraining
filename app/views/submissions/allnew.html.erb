<% provide(:title, "Soumissions") %>

<h1>
<%= title_1("Soumissions") %>
<span class="h4"> - <%= link_to "Tout voir", all_submissions_path %>
<% if current_user.root? %>
  - <%= link_to "Cachées", allhidden_submissions_path %>
<% end %>
<% if current_user.root? || current_user.suspicions.count > 0 %>
 - <%= link_to "Plagiats", suspicions_path %>
<% end %>
<% if current_user.root? || current_user.starproposals.count > 0 %>
 - <%= link_to "Étoiles", starproposals_path %>
<% end %>
</span>
</h1>

<% section = 0 %>
<% if(params.has_key?:section) %>
  <% section = params[:section].to_i %>
<% end %>
<% section_condition = (section > 0) ? "problems.section_id = #{section}" : "" %>
<% section_choices = [["Toutes les sections", 0]] %>
<% Section.where(:fondation => false).order(:id).each do |s| %>
  <% section_choices.push([s.name, s.id]) %>
<% end %>

<% levels_int = 31 %>
<% if(params.has_key?:levels) %>
  <% levels_int = params[:levels].to_i %>
<% end %>

<% levels = [] %>
<% for l in [1, 2, 3, 4, 5] %>
  <% if (levels_int & (1 << (l-1)) != 0) %>
    <% levels.push(l) %>
  <% end %>
<% end %>

<% levels_choices = [["Tous les niveaux", 31], ["Niveaux 1 et 2", 3], ["Niveaux 3, 4 et 5", 28]] %>
<% (1..5).each do |x| %>
  <% levels_choices.push(["Niveau #{x}", 1 << (x-1)]) %>
<% end %>

<% fav_int = 0 %>
<% favorite_condition = "" %>
<% if(params.has_key?:fav) && params[:fav].to_i == 1 %>
  <% fav_int = 1 %>
  <% favorite_condition = "problems.id IN (SELECT favoriteproblems.problem_id FROM favoriteproblems WHERE favoriteproblems.user_id = #{current_user.id})" %>
<% end %>
<% fav_choices = [["Tout", 0], ["Favoris", 1]] %>

<%= form_tag "", :method => "get", :name => "search_section_and_levels", :class => "mb-3" do %>
  <div class="grid" style="--bs-columns:12; --bs-gap:10px;">
    <div class="g-col-12 g-start-md-4 g-col-md-4 g-start-lg-5 g-col-lg-3 g-start-xl-6 g-col-xl-3 g-start-xxl-8 g-col-xxl-2">
      <%= select_tag :section, options_for_select(section_choices, section), :class =>"form-select", :onchange => ("javascript: document.search_section_and_levels.submit();") %>
    </div>
    <div class="g-col-12 g-col-md-3 g-col-lg-3 g-col-xl-2 g-col-xxl-2">
      <%= select_tag :levels, options_for_select(levels_choices, levels_int), :class =>"form-select", :onchange => ("javascript: document.search_section_and_levels.submit();") %>
    </div>
    <div class="g-col-12 g-col-md-2 g-col-lg-2 g-col-xl-2 g-col-xxl-1">
      <%= select_tag :fav, options_for_select(fav_choices, fav_int), :class =>"form-select", :onchange => ("javascript: document.search_section_and_levels.submit();") %>
    </div>
  </div>
<% end %>

<!-- Graphique du nombre de soumissions en attente -->
<% date_end = Time.now %>
<% date_begin_bad = date_end - 7.days %>
<% time_interval = 20.minutes %>
<% date_begin = date_begin_bad.beginning_of_hour %>
<% while date_begin + time_interval <= date_begin_bad %>
  <% date_begin = date_begin + time_interval %>
<% end %>
<% date_begin_for_test = date_begin - 2.days %>
<% num_intervals = ((date_end - date_begin) / time_interval).ceil %>

<% shifts = [0, 4, 8] %>

<% new_sub = Array.new(3) %>
<% new_cor = Array.new(3) %>

<% (0..2).each do |i| %>
  <% new_sub[i] = Array.new(num_intervals, 0) %>
  <% new_cor[i] = Array.new(num_intervals, 0) %>
<% end %>

<!-- Go through all recent submissions to compute new_sub[0] -->
<% Submission.joins(:problem).select(:created_at, :problem_id).where.not(:status => [:draft, :waiting_forever]).where("created_at > ?", date_begin).where(section_condition).where("problems.level in (?)", levels).where(favorite_condition).each do |s| %>
  <% interval_id = [((s.created_at - date_begin) / time_interval).floor, num_intervals-1].min %>
  <% new_sub[0][interval_id] += 1 %>
<% end %>

<!-- Go through recent waiting submissions to compute new_sub[1] and new_sub[2] for them -->
<% Submission.joins(:problem).select(:created_at, :problem_id).where("created_at > ?", date_begin - (shifts.max).days).where(:status => :waiting).where(section_condition).where("problems.level in (?)", levels).where(favorite_condition).each do |s| %>
  <% (1..2).each do |i| %>
    <% threshold_date = s.created_at.in_time_zone.to_date + shifts[i] %>
    <% threshold_time = threshold_date.in_time_zone.to_time + 1.second %>
    <% if threshold_time >= date_begin %>
      <% interval_id = ((threshold_time - date_begin) / time_interval).floor %>
      <% if interval_id <= num_intervals-1 %>
        <% new_sub[i][interval_id] += 1 %>
      <% end %>
    <% end %>
  <% end %>
<% end %>

<!-- Go through recently corrected submissions to compute new_sub[1] and new_sub[2] for them, as well as new_cor[0], new_cor[1], new_cor[2] -->
<% Following.joins(submission: :problem).select("followings.created_at, submissions.created_at AS sub_created_at").where(:kind => :first_corrector).where("followings.created_at > ?", date_begin).where(section_condition).where("problems.level in (?)", levels).where(favorite_condition).each do |f| %>
  <% interval_id = [((f.created_at - date_begin) / time_interval).floor, num_intervals-1].min %>
  <% new_cor[0][interval_id] += 1 %>
  <% (1..2).each do |i| %>
    <% threshold_date = f.sub_created_at.in_time_zone.to_date + shifts[i] %>
    <% if threshold_date <= f.created_at.in_time_zone.to_date %>
      <% new_cor[i][interval_id] += 1 %>
      <% threshold_time = threshold_date.in_time_zone.to_time + 1.second %>
      <% if threshold_time >= date_begin %>
        <% second_interval_id = [((threshold_time - date_begin) / time_interval).floor, num_intervals-1].min %>
        <% new_sub[i][second_interval_id] += 1 %>
      <% end %>
    <% else %>
      <% break %>
    <% end %>
  <% end %>
<% end %>

<% Groupdate.time_zone = false unless Rails.env.production? %>
<% num_waiting_now_by_date = Submission.joins(:problem).where(:status => :waiting).where(section_condition).where("problems.level in (?)", levels).where(favorite_condition).group_by_day(:created_at).count %>

<% r = (num_intervals-1)..0 %>

<% graphs = Array.new(3) %>
<% (0..2).each do |i| %>
  <% date_limit = date_end.in_time_zone.to_date - shifts[i] %>
  <% num_waiting_now = 0 %>
  <% num_waiting_now_by_date.each do |date, n| %>
    <% num_waiting_now += n if date <= date_limit %>
  <% end %>

  <% graphs[i] = Array.new(num_intervals+1, 0) %>
  <% graphs[i][num_intervals] = num_waiting_now %>
  <% (r.first).downto(r.last).each do |j| %>
    <% graphs[i][j] = graphs[i][j+1] + new_cor[i][j] - new_sub[i][j] %>
  <% end %>
<% end %>
<% graph_maxi = graphs[0].max+1 %>

<% colors = ['green', 'orange', 'red'] %>

<center>

<!-- Endroit pour dessiner le graphique des soumissions en attente -->
<div id="contenant" class="mb-3" style="width:100%; max-width:900px; height:280px; position:relative; display:block;">
<canvas id="myCanvas" width="900" height="280" style="position:absolute; left:0px; top:0px;">
Votre navigateur ne supporte pas les canvas.
</canvas>
</div>

</center>


<script type="text/javascript">
  function respondCanvas() {
    // Check light or dark theme
    var is_dark = (document.documentElement.getAttribute('data-bs-theme') == 'dark');
    
    // Get the canvas & context
    var c = document.getElementById('myCanvas');
    var ctx = c.getContext('2d');
    var container = c.parentElement;
    
    var W = 900.0;
    var H = 280.0;
    
    c.setAttribute('width', container.offsetWidth); //max width
    c.setAttribute('height', H * container.offsetWidth / W); //max height

    container.style.height = H * container.offsetWidth / W + "px";

    // Draw content

    var pct = c.offsetWidth / W;
    var W_real = pct * W;
    var H_real = pct * H;
    var W_offset = 50;
    var H_offset = 5;
    var W_size = W_real - W_offset - 50;
    var H_size = H_real - H_offset - 20;
    var H_internal_size = H_size - 12;
    var W_internal_size = W_size - 3;
    
    // Rectangle et fond blanc
    ctx.beginPath();
    ctx.rect(W_offset, H_offset, W_size, H_size);
    ctx.fillStyle = (is_dark ? 'rgb(33, 37, 41)' : 'white');
    ctx.fill(); 
    
    ctx.lineWidth = 1.5;
    ctx.strokeStyle = (is_dark ? 'white' : 'black');
    ctx.stroke();
    
    // Labels axe des X
    ctx.font = "12px Arial";
    ctx.fillStyle = (is_dark ? 'white' : 'black');
    ctx.textAlign = 'center';
    
    ctx.setLineDash([10, 10]);
    ctx.beginPath();
    
    <% d = date_end %>
    <% num_days = 0 %>
    <% while (d > date_begin - 1.minute) %>
      <% ratio = (d - date_begin)/(date_end - date_begin) %>
      ctx.fillText("J-<%= num_days %>", W_offset + W_internal_size * <%= ratio %>, H_offset + H_size + 15);
      <% num_days = num_days + 1 %>
      <% d = date_end - (num_days).days %>
    <% end %>
    
    // Barres horizontales (et labels axe des Y)    
    ctx.textAlign = 'right';
    ctx.lineWidth = 1;
    ctx.strokeStyle = (is_dark ? '#bbbbbb' : 'grey');
    <% i = graph_maxi - 1 %>
    <% i_step = [(i/5.0).ceil, 1].max %>
    <% while (i > 0) %>
      haut = H_offset + H_size - H_internal_size * <%= i / graph_maxi.to_f %>
      ctx.moveTo(W_offset, haut);
      ctx.lineTo(W_offset + W_size, haut);
      ctx.fillText("<%= i %>", W_offset - 6, haut + 4);
      <% i = i - i_step %>
    <% end %>
    ctx.stroke();
    
    // Avoid graph to go below zero in sharp angles:
    ctx.save();
    ctx.beginPath();
    ctx.rect(W_offset-1, H_offset-1, W_size+2, H_size+2);
    ctx.clip();
            
    <% (0..2).each do |i| %>
      ctx.beginPath();
      ctx.moveTo(W_offset + W_internal_size, H_offset + H_size - H_internal_size * <%= graphs[i][num_intervals] / graph_maxi.to_f %>);
      ctx.strokeStyle = '<%= colors[i] %>';
      ctx.setLineDash([]);
      ctx.lineWidth = 2;
      var width_one_interval = W_internal_size / <%= num_intervals %>
      <% (r.first).downto(r.last).each do |j| %>
        ctx.lineTo(W_offset + <%= (j+1) %> * width_one_interval, H_offset + H_size - H_internal_size * <%= graphs[i][j] / graph_maxi.to_f %>);
      <% end %>
      ctx.stroke()
    <% end %>
    
    ctx.restore();
  }

  window.addEventListener("resize", () => {
    respondCanvas();
  });
  
  window.addEventListener("theme-change", () => {
    respondCanvas();
  });
  
  respondCanvas();
</script>


<% if @submissions.size == 0 %>
  <p>Il n'y a plus rien à corriger, beau boulot !</p>
<% else %>

  <% if !current_user.admin? %>
    <% problem_solved = Array.new %>
    <% current_user.solvedproblems.select(:problem_id).each do |sp| %>
      <% problem_solved[sp.problem_id] = true %>
    <% end %>
  <% end %>
  
  <% limit = User.limit_waiting_submissions %>
  <% cur = 0 %>
  <% split_done = false %>
  <% date_before = Date.new(2009, 1, 1) %>

  <table class="table table-bordered">
  <%= render 'submissions/line_header', hide_last_activity: true, show_section_and_level: true, show_correctors: true, show_content_length: true %>
  <% @submissions.each do |n| %>
    <% if date_before < n.created_at.in_time_zone.to_date %>
      <% date_before = n.created_at.in_time_zone.to_date %>
      <% if !split_done && cur >= limit %>
        </table>
        <h4>Moins prioritaires...</h4>
        <table class="table table-bordered">
        <%= render 'submissions/line_header', hide_last_activity: true, show_section_and_level: true, show_correctors: true, show_content_length: true %>
        <% split_done = true %>
      <% end %>
    <% end %>
    <% hidden_sub = (!current_user.admin? && problem_solved[n.problem_id] != true) %>
    <% cur = cur + 1 unless hidden_sub %>
    <%= render 'submissions/line', s: n, hide_last_activity: true, show_section_and_level: true, hidden_sub: hidden_sub, show_num_waiting_days_from: "created_at", show_correctors: true, show_content_length: true %>
  <% end %>
  </table>

<% end %>
